<form method="post" action="{{ path('uploadfiles',{'logo_id':logo.id, 'width' : width, 'position' : position}) }}" enctype="multipart/form-data">
    <center><h4>4. Upload your pictures</h4></center>
    <div id="drop">
        Drop Here<br>

        <a>Browse</a>
        <input type="file" name="upl" multiple="">
    </div>

    <ul>
        <!-- The file uploads will be shown here -->
    </ul>
    <center>
        <div id="download_link" style="color:white;display:none;">
            <div class="div_loading" style="display:none;"><img src="{{ asset("bundles/main/images/ajax-loader-bar.gif") }}"></div>
                <span id="span_info">
                    <h4>5. Wait until all pictures are uploaded and <br>
                        <a id="zip" href="#">Zip</a></h4>
                </span>

            <br>

            <div id="div_zip"></div>
        </div>
    </center>
</form>

<script>
    $('#zip').click(function(){
        console.log("zip");
        $(this).parent().find('input').click();

        var urlzip = "{{ path('zip') }}";
        $.ajax({
            url: urlzip,
            type: "POST",
            success: function (result) {
                console("success zipping");
            }
        });
    });

    var ul = $('#upload ul');

    $('#drop a').click(function(){
        // Simulate a click on the file input button
        // to show the file browser dialog
        console.log("ici");
        $(this).parent().find('input').click();
    });

    // Initialize the jQuery File Upload plugin
    $('#upload').fileupload({

        // This element will accept file drag/drop uploading
        dropZone: $('#drop'),

        // This function is called when a file is added to the queue;
        // either via the browse button, or via drag/drop:
        add: function (e, data) {

            var tpl = $('<li class="working"><input type="text" value="0" data-width="48" data-height="48"'+
                    ' data-fgColor="#0788a5" data-readOnly="1" data-bgColor="#3e4043" /><p></p><span></span></li>');

            // Append the file name and file size
            tpl.find('p').html("<a href='uploads/" + data.files[0].name + "'>" + data.files[0].name + "</a>")
                    .append('<i>' + formatFileSize(data.files[0].size) + '</i>');

            // Add the HTML to the UL element
            data.context = tpl.appendTo(ul);

            // Initialize the knob plugin
            tpl.find('input').knob();

            // Listen for clicks on the cancel icon
            tpl.find('span').click(function(){

                if(tpl.hasClass('working')){
                    jqXHR.abort();
                }

                tpl.fadeOut(function(){
                    tpl.remove();
                });

            });

            // Automatically upload the file once it is added to the queue
            var jqXHR = data.submit();
        },

        progress: function(e, data){

            // Calculate the completion percentage of the upload
            var progress = parseInt(data.loaded / data.total * 100, 10);

            // Update the hidden input field and trigger a change
            // so that the jQuery knob plugin knows to update the dial
            data.context.find('input').val(progress).change();

            if(progress == 100){
                $("#download_name").hide();
                $("#download_link").show();

                data.context.removeClass('working');

                //Change loader by img
                /*var img = new Image;
                 img.src = "uploades/" + data.files[0].name;
                 $("#draw_img").getContext("2d").drawImage(img,0,0);*/
            }
        },

        fail:function(e, data){
            // Something has gone wrong!
            data.context.addClass('error');
        }

    });


    // Prevent the default action when a file is dropped on the window
    $(document).on('drop dragover', function (e) {
        e.preventDefault();
    });

    // Helper function that formats the file sizes
    function formatFileSize(bytes) {
        if (typeof bytes !== 'number') {
            return '';
        }

        if (bytes >= 1000000000) {
            return (bytes / 1000000000).toFixed(2) + ' GB';
        }

        if (bytes >= 1000000) {
            return (bytes / 1000000).toFixed(2) + ' MB';
        }

        return (bytes / 1000).toFixed(2) + ' KB';
    }


</script>